// Copyright 2017 NDP Syst√®mes. All Rights Reserved.
// See LICENSE file for full licensing details.

package models

import (
	"testing"

	"github.com/doxa-erp/doxa/doxa/models/security"
	. "github.com/smartystreets/goconvey/convey"
)

func TestDataLoading(t *testing.T) {
	Convey("Testing CSV data loading into database", t, func() {
		So(SimulateInNewEnvironment(security.SuperUserID, func(env Environment) {
			userObj := env.Pool("User")
			Convey("Simple import of users - no update", func() {
				LoadCSVDataFile("testdata/User.csv")
				users := userObj.SearchAll()
				So(users.Len(), ShouldEqual, 5)
				userPeter := userObj.Search(userObj.Model().Field("Name").Equals("Peter"))
				So(userPeter.Get("Nums").(int), ShouldEqual, 1)
				So(userPeter.Get("IsStaff").(bool), ShouldEqual, true)
				So(userPeter.Get("Size").(float64), ShouldEqual, 1.78)
				userMary := userObj.Search(userObj.Model().Field("Name").Equals("Mary"))
				So(userMary.Get("Nums").(int), ShouldEqual, 3)
				So(userMary.Get("IsStaff").(bool), ShouldEqual, false)
				So(userMary.Get("Size").(float64), ShouldEqual, 1.59)

				So(func() { LoadCSVDataFile("testdata/001User.csv") }, ShouldPanic)
				So(func() { LoadCSVDataFile("testdata/011User.csv") }, ShouldPanic)
				So(func() { LoadCSVDataFile("testdata/012User.csv") }, ShouldPanic)
			})
			Convey("Check that no update does not update existing records", func() {
				userPeter := userObj.Search(userObj.Model().Field("Name").Equals("Peter")).Fetch()
				userPeter.Set("Name", "Peter Modified")
				userPeter.Load()
				So(userPeter.Get("Name"), ShouldEqual, "Peter Modified")
				LoadCSVDataFile("testdata/User.csv")
				userPeter.Load()
				So(userPeter.Get("Name"), ShouldEqual, "Peter Modified")
			})
			Convey("Check that import with update updates even existing", func() {
				LoadCSVDataFile("testdata/200User_update.csv")
				users := userObj.SearchAll()
				So(users.Len(), ShouldEqual, 6)
				userPeter := userObj.Search(userObj.Model().Field("Name").Equals("Peter"))
				So(userPeter.Get("Nums").(int), ShouldEqual, 2)
				So(userPeter.Get("IsStaff").(bool), ShouldEqual, true)
				So(userPeter.Get("Size").(float64), ShouldEqual, 1.78)
				userMary := userObj.Search(userObj.Model().Field("Name").Equals("Mary"))
				So(userMary.Get("Nums").(int), ShouldEqual, 5)
				So(userMary.Get("IsStaff").(bool), ShouldEqual, false)
				So(userMary.Get("Size").(float64), ShouldEqual, 1.59)
				userNick := userObj.Search(userObj.Model().Field("Name").Equals("Nick"))
				So(userNick.Get("Nums").(int), ShouldEqual, 8)
				So(userNick.Get("IsStaff").(bool), ShouldEqual, true)
				So(userNick.Get("Size").(float64), ShouldEqual, 1.85)
			})
			Convey("Checking import with future version", func() {
				LoadCSVDataFile("testdata/User_12.csv")
				users := userObj.SearchAll()
				So(users.Len(), ShouldEqual, 7)
				userPeter := userObj.Search(userObj.Model().Field("Name").Equals("Peter"))
				So(userPeter.Get("HexyaVersion").(int), ShouldEqual, 0)
				So(userPeter.Get("Nums").(int), ShouldEqual, 2)
				So(userPeter.Get("IsStaff").(bool), ShouldEqual, true)
				So(userPeter.Get("Size").(float64), ShouldEqual, 1.78)
				userMary := userObj.Search(userObj.Model().Field("Name").Equals("Mary modified"))
				So(userMary.Get("HexyaVersion").(int), ShouldEqual, 12)
				So(userMary.Get("Nums").(int), ShouldEqual, 5)
				So(userMary.Get("IsStaff").(bool), ShouldEqual, false)
				So(userMary.Get("Size").(float64), ShouldEqual, 1.58)
				userNick := userObj.Search(userObj.Model().Field("Name").Equals("Nick"))
				So(userNick.Get("HexyaVersion").(int), ShouldEqual, 0)
				So(userNick.Get("Nums").(int), ShouldEqual, 8)
				So(userNick.Get("IsStaff").(bool), ShouldEqual, true)
				So(userNick.Get("Size").(float64), ShouldEqual, 1.85)
				userRob := userObj.Search(userObj.Model().Field("Name").Equals("Rob"))
				So(userRob.Get("HexyaVersion").(int), ShouldEqual, 12)
				So(userRob.Get("Nums").(int), ShouldEqual, 14)
				So(userRob.Get("IsStaff").(bool), ShouldEqual, false)
				So(userRob.Get("Size").(float64), ShouldEqual, 1.81)
			})
			Convey("Checking import with past version", func() {
				LoadCSVDataFile("testdata/User_2.csv")
				users := userObj.SearchAll()
				So(users.Len(), ShouldEqual, 8)
				userMary := userObj.Search(userObj.Model().Field("Name").Equals("Mary modified"))
				So(userMary.Get("HexyaVersion").(int), ShouldEqual, 12)
				So(userMary.Get("Nums").(int), ShouldEqual, 5)
				So(userMary.Get("IsStaff").(bool), ShouldEqual, false)
				So(userMary.Get("Size").(float64), ShouldEqual, 1.58)
				userNick := userObj.Search(userObj.Model().Field("Name").Equals("Nick"))
				So(userNick.Get("HexyaVersion").(int), ShouldEqual, 2)
				So(userNick.Get("Nums").(int), ShouldEqual, 54)
				So(userNick.Get("IsStaff").(bool), ShouldEqual, true)
				So(userNick.Get("Size").(float64), ShouldEqual, 1.86)
				userKen := userObj.Search(userObj.Model().Field("Name").Equals("Ken"))
				So(userKen.Get("HexyaVersion").(int), ShouldEqual, 2)
				So(userKen.Get("Nums").(int), ShouldEqual, 10)
				So(userKen.Get("IsStaff").(bool), ShouldEqual, false)
				So(userKen.Get("Size").(float64), ShouldEqual, 1.76)
			})
			Convey("Checking imports with foreign keys", func() {
				LoadCSVDataFile("testdata/010-Tag.csv")
				LoadCSVDataFile("testdata/Post.csv")
				userPeter := userObj.Search(userObj.Model().Field("Name").Equals("Peter"))
				So(userPeter.Get("Posts").(RecordSet).Collection().Len(), ShouldEqual, 1)
				peterPost := userPeter.Get("Posts").(RecordSet).Collection()
				So(peterPost.Get("Title"), ShouldEqual, "Peter's Post")
				So(peterPost.Get("Content"), ShouldEqual, "This is peter's post content")
				So(peterPost.Get("Tags").(RecordSet).Collection().Len(), ShouldEqual, 2)
				userNick := userObj.Search(userObj.Model().Field("Name").Equals("Nick"))
				So(userNick.Get("Posts").(RecordSet).Collection().Len(), ShouldEqual, 1)
				nickPost := userNick.Get("Posts").(RecordSet).Collection()
				So(nickPost.Get("Title"), ShouldEqual, "Nick's Post")
				So(nickPost.Get("Content"), ShouldEqual, "No content")
				So(nickPost.Get("Tags").(RecordSet).Collection().Len(), ShouldEqual, 3)

				So(func() { LoadCSVDataFile("testdata/001Post.csv") }, ShouldPanic)
				So(func() { LoadCSVDataFile("testdata/002Post.csv") }, ShouldPanic)
			})
		}), ShouldBeNil)
	})
}
